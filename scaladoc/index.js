Index.PACKAGES = {"lzwpack" : [{"name" : "lzwpack.Alphabet", "shortDescription" : "Companion object for Alphabet", "object" : "lzwpack\/Alphabet$.html", "members_object" : [{"label" : "Compress", "tail" : ": Alphabet[Byte]", "member" : "lzwpack.Alphabet.Compress", "link" : "lzwpack\/Alphabet$.html#Compress:lzwpack.Alphabet[Byte]", "kind" : "implicit val"}, {"label" : "AllBytes", "tail" : ": Alphabet[Byte]", "member" : "lzwpack.Alphabet.AllBytes", "link" : "lzwpack\/Alphabet$.html#AllBytes:lzwpack.Alphabet[Byte]", "kind" : "implicit val"}, {"label" : "AllChars", "tail" : ": Alphabet[Char]", "member" : "lzwpack.Alphabet.AllChars", "link" : "lzwpack\/Alphabet$.html#AllChars:lzwpack.Alphabet[Char]", "kind" : "implicit val"}, {"label" : "Alphanumeric", "tail" : ": Alphabet[Char]", "member" : "lzwpack.Alphabet.Alphanumeric", "link" : "lzwpack\/Alphabet$.html#Alphanumeric:lzwpack.Alphabet[Char]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(as: Seq[A]): Alphabet[A]", "member" : "lzwpack.Alphabet.apply", "link" : "lzwpack\/Alphabet$.html#apply[A](as:Seq[A]):lzwpack.Alphabet[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/Alphabet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/Alphabet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/Alphabet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/Alphabet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/Alphabet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/Alphabet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/Alphabet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Alphabet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Alphabet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Alphabet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/Alphabet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/Alphabet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/Alphabet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/Alphabet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/Alphabet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/Alphabet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/Alphabet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/Alphabet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/Alphabet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.AlphabetInstances", "members_trait" : [{"label" : "alphabetEq", "tail" : "(arg0: Eq[A]): Eq[Alphabet[A]]", "member" : "lzwpack.AlphabetInstances.alphabetEq", "link" : "lzwpack\/AlphabetInstances.html#alphabetEq[A](implicitevidence$1:cats.kernel.Eq[A]):cats.kernel.Eq[lzwpack.Alphabet[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/AlphabetInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/AlphabetInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/AlphabetInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/AlphabetInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/AlphabetInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/AlphabetInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/AlphabetInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/AlphabetInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/AlphabetInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/AlphabetInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/AlphabetInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/AlphabetInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/AlphabetInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/AlphabetInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/AlphabetInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/AlphabetInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "lzwpack\/AlphabetInstances.html", "kind" : "trait"}, {"name" : "lzwpack.AlphabetSyntax", "members_trait" : [{"label" : "Ops", "tail" : "", "member" : "lzwpack.AlphabetSyntax.Ops", "link" : "lzwpack\/AlphabetSyntax.html#Ops[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/AlphabetSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/AlphabetSyntax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/AlphabetSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/AlphabetSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/AlphabetSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/AlphabetSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/AlphabetSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/AlphabetSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/AlphabetSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/AlphabetSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/AlphabetSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/AlphabetSyntax.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/AlphabetSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/AlphabetSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/AlphabetSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/AlphabetSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "lzwpack\/AlphabetSyntax.html", "kind" : "trait"}, {"name" : "lzwpack.AlphabetSyntax.Ops", "shortDescription" : "Extension methods for Alphabet.", "members_class" : [{"label" : "pure", "tail" : "(F: Applicative[F]): Alphabet[F[A]]", "member" : "lzwpack.AlphabetSyntax.Ops.pure", "link" : "lzwpack\/AlphabetSyntax$Ops.html#pure[F[_]](implicitF:cats.Applicative[F]):lzwpack.Alphabet[F[A]]", "kind" : "def"}, {"member" : "lzwpack.AlphabetSyntax.Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/AlphabetSyntax$Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/AlphabetSyntax$Ops.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/AlphabetSyntax$Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/AlphabetSyntax$Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/AlphabetSyntax$Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/AlphabetSyntax$Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/AlphabetSyntax$Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetSyntax$Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetSyntax$Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/AlphabetSyntax$Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/AlphabetSyntax$Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/AlphabetSyntax$Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/AlphabetSyntax$Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/AlphabetSyntax$Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/AlphabetSyntax$Ops.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/AlphabetSyntax$Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/AlphabetSyntax$Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/AlphabetSyntax$Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/AlphabetSyntax$Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/AlphabetSyntax$Ops.html", "kind" : "class"}, {"name" : "lzwpack.Application", "shortDescription" : "", "object" : "lzwpack\/Application$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "lzwpack.Application.main", "link" : "lzwpack\/Application$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "program", "tail" : "(args: Seq[String]): IO[Unit]", "member" : "lzwpack.Application.program", "link" : "lzwpack\/Application$.html#program(args:Seq[String]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "parseOptions", "tail" : "(args: Seq[String]): IO[Option[Options]]", "member" : "lzwpack.Application.parseOptions", "link" : "lzwpack\/Application$.html#parseOptions(args:Seq[String]):cats.effect.IO[Option[lzwpack.Application.Options]]", "kind" : "def"}, {"label" : "runDecompress", "tail" : "(path: Path, maxCodeSize: Int, sink: Sink[IO, Byte]): IO[Unit]", "member" : "lzwpack.Application.runDecompress", "link" : "lzwpack\/Application$.html#runDecompress(path:java.nio.file.Path,maxCodeSize:Int,sink:fs2.Sink[cats.effect.IO,Byte]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "runCompress", "tail" : "(path: Path, maxCodeSize: Int, sink: Sink[IO, Byte]): IO[Unit]", "member" : "lzwpack.Application.runCompress", "link" : "lzwpack\/Application$.html#runCompress(path:java.nio.file.Path,maxCodeSize:Int,sink:fs2.Sink[cats.effect.IO,Byte]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "inputStream", "tail" : "(path: Path): Stream[IO, Byte]", "member" : "lzwpack.Application.inputStream", "link" : "lzwpack\/Application$.html#inputStream(path:java.nio.file.Path):fs2.Stream[cats.effect.IO,Byte]", "kind" : "def"}, {"label" : "options", "tail" : "(): OptionParser[Options]", "member" : "lzwpack.Application.options", "link" : "lzwpack\/Application$.html#options:scopt.OptionParser[lzwpack.Application.Options]", "kind" : "def"}, {"label" : "Options", "tail" : "", "member" : "lzwpack.Application.Options", "link" : "lzwpack\/Application$.html#OptionsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "OperationMode", "tail" : "", "member" : "lzwpack.Application.OperationMode", "link" : "lzwpack\/Application$.html#OperationMode", "kind" : "object"}, {"label" : "OperationMode", "tail" : "", "member" : "lzwpack.Application.OperationMode", "link" : "lzwpack\/Application$.html#OperationModeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/Application$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/Application$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/Application$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/Application$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/Application$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/Application$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/Application$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Application$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Application$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Application$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/Application$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/Application$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/Application$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/Application$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/Application$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/Application$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/Application$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/Application$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/Application$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.CompressHeader", "shortDescription" : "Provides compress(1) compatible file header coding and decoding.", "object" : "lzwpack\/CompressHeader$.html", "members_object" : [{"label" : "encode", "tail" : "(stream: Stream[F, Byte]): Stream[F, Byte]", "member" : "lzwpack.CompressHeader.encode", "link" : "lzwpack\/CompressHeader$.html#encode[F[_]](stream:fs2.Stream[F,Byte]):fs2.Stream[F,Byte]", "kind" : "def"}, {"label" : "decode", "tail" : "(stream: Stream[F, Byte]): Stream[F, Byte]", "member" : "lzwpack.CompressHeader.decode", "link" : "lzwpack\/CompressHeader$.html#decode[F[_]](stream:fs2.Stream[F,Byte]):fs2.Stream[F,Byte]", "kind" : "def"}, {"label" : "CodeSizeMarker", "tail" : ": Byte", "member" : "lzwpack.CompressHeader.CodeSizeMarker", "link" : "lzwpack\/CompressHeader$.html#CodeSizeMarker:Byte", "kind" : "val"}, {"label" : "Header", "tail" : ": List[Byte]", "member" : "lzwpack.CompressHeader.Header", "link" : "lzwpack\/CompressHeader$.html#Header:List[Byte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/CompressHeader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/CompressHeader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/CompressHeader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/CompressHeader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/CompressHeader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/CompressHeader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/CompressHeader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressHeader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressHeader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressHeader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/CompressHeader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/CompressHeader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/CompressHeader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/CompressHeader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/CompressHeader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/CompressHeader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/CompressHeader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/CompressHeader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/CompressHeader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.CompressionDict", "shortDescription" : "A Dict optimized for compression.", "object" : "lzwpack\/CompressionDict$.html", "members_object" : [{"label" : "empty", "tail" : "(arg0: Hash[K]): Dict[K]", "member" : "lzwpack.CompressionDict.empty", "link" : "lzwpack\/CompressionDict$.html#empty[K](implicitevidence$3:cats.Hash[K]):lzwpack.Dict[K]", "kind" : "def"}, {"label" : "fromAlphabet", "tail" : "(alphabet: Alphabet[A])(arg0: Hash[A]): Dict[A]", "member" : "lzwpack.MakeDict.fromAlphabet", "link" : "lzwpack\/CompressionDict$.html#fromAlphabet[A](alphabet:lzwpack.Alphabet[A])(implicitevidence$2:cats.Hash[A]):lzwpack.Dict[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/CompressionDict$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/CompressionDict$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/CompressionDict$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/CompressionDict$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/CompressionDict$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/CompressionDict$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/CompressionDict$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressionDict$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressionDict$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressionDict$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/CompressionDict$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/CompressionDict$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/CompressionDict$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/CompressionDict$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/CompressionDict$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/CompressionDict$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/CompressionDict$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/CompressionDict$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/CompressionDict$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "find", "tail" : "(code: Code): Option[K]", "member" : "lzwpack.CompressionDict.find", "link" : "lzwpack\/CompressionDict.html#find(code:lzwpack.Code):Option[K]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K): Code", "member" : "lzwpack.CompressionDict.get", "link" : "lzwpack\/CompressionDict.html#get(key:K):lzwpack.Code", "kind" : "def"}, {"label" : "add", "tail" : "(key: K): Dict[K]", "member" : "lzwpack.CompressionDict.add", "link" : "lzwpack\/CompressionDict.html#add(key:K):lzwpack.Dict[K]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: K): Boolean", "member" : "lzwpack.CompressionDict.contains", "link" : "lzwpack\/CompressionDict.html#contains(key:K):Boolean", "kind" : "def"}, {"member" : "lzwpack.CompressionDict#<init>", "error" : "unsupported entity"}, {"label" : "currentCode", "tail" : ": Int", "member" : "lzwpack.CompressionDict.currentCode", "link" : "lzwpack\/CompressionDict.html#currentCode:Int", "kind" : "val"}, {"label" : "map", "tail" : ": HashMapVector[K, Code]", "member" : "lzwpack.CompressionDict.map", "link" : "lzwpack\/CompressionDict.html#map:lzwpack.data.HashMapVector[K,lzwpack.Code]", "kind" : "val"}, {"label" : "nextCode", "tail" : "(): Int", "member" : "lzwpack.Dict.nextCode", "link" : "lzwpack\/CompressionDict.html#nextCode:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/CompressionDict.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/CompressionDict.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/CompressionDict.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/CompressionDict.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/CompressionDict.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/CompressionDict.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/CompressionDict.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressionDict.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressionDict.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/CompressionDict.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/CompressionDict.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/CompressionDict.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/CompressionDict.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/CompressionDict.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/CompressionDict.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/CompressionDict.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "lzwpack\/CompressionDict.html", "kind" : "case class"}, {"name" : "lzwpack.DecompressionDict", "shortDescription" : "A Dict optimized for decompression.", "object" : "lzwpack\/DecompressionDict$.html", "members_object" : [{"label" : "empty", "tail" : "(arg0: Hash[K]): Dict[K]", "member" : "lzwpack.DecompressionDict.empty", "link" : "lzwpack\/DecompressionDict$.html#empty[K](implicitevidence$5:cats.Hash[K]):lzwpack.Dict[K]", "kind" : "def"}, {"label" : "fromAlphabet", "tail" : "(alphabet: Alphabet[A])(arg0: Hash[A]): Dict[A]", "member" : "lzwpack.MakeDict.fromAlphabet", "link" : "lzwpack\/DecompressionDict$.html#fromAlphabet[A](alphabet:lzwpack.Alphabet[A])(implicitevidence$2:cats.Hash[A]):lzwpack.Dict[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/DecompressionDict$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/DecompressionDict$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/DecompressionDict$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/DecompressionDict$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/DecompressionDict$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/DecompressionDict$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/DecompressionDict$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DecompressionDict$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DecompressionDict$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DecompressionDict$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/DecompressionDict$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/DecompressionDict$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/DecompressionDict$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/DecompressionDict$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/DecompressionDict$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/DecompressionDict$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/DecompressionDict$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/DecompressionDict$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/DecompressionDict$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getOption", "tail" : "(key: K): Option[Code]", "member" : "lzwpack.DecompressionDict.getOption", "link" : "lzwpack\/DecompressionDict.html#getOption(key:K):Option[lzwpack.Code]", "kind" : "def"}, {"label" : "find", "tail" : "(code: Code): Option[K]", "member" : "lzwpack.DecompressionDict.find", "link" : "lzwpack\/DecompressionDict.html#find(code:lzwpack.Code):Option[K]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K): Code", "member" : "lzwpack.DecompressionDict.get", "link" : "lzwpack\/DecompressionDict.html#get(key:K):lzwpack.Code", "kind" : "def"}, {"label" : "add", "tail" : "(key: K): Dict[K]", "member" : "lzwpack.DecompressionDict.add", "link" : "lzwpack\/DecompressionDict.html#add(key:K):lzwpack.Dict[K]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: K): Boolean", "member" : "lzwpack.DecompressionDict.contains", "link" : "lzwpack\/DecompressionDict.html#contains(key:K):Boolean", "kind" : "def"}, {"member" : "lzwpack.DecompressionDict#<init>", "error" : "unsupported entity"}, {"label" : "currentCode", "tail" : ": Int", "member" : "lzwpack.DecompressionDict.currentCode", "link" : "lzwpack\/DecompressionDict.html#currentCode:Int", "kind" : "val"}, {"label" : "map", "tail" : ": SparseVector[K]", "member" : "lzwpack.DecompressionDict.map", "link" : "lzwpack\/DecompressionDict.html#map:lzwpack.data.SparseVector[K]", "kind" : "val"}, {"label" : "nextCode", "tail" : "(): Int", "member" : "lzwpack.Dict.nextCode", "link" : "lzwpack\/DecompressionDict.html#nextCode:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/DecompressionDict.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/DecompressionDict.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/DecompressionDict.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/DecompressionDict.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/DecompressionDict.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/DecompressionDict.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/DecompressionDict.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DecompressionDict.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DecompressionDict.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DecompressionDict.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/DecompressionDict.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/DecompressionDict.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/DecompressionDict.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/DecompressionDict.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/DecompressionDict.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/DecompressionDict.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "lzwpack\/DecompressionDict.html", "kind" : "case class"}, {"name" : "lzwpack.Dict", "members_trait" : [{"label" : "nextCode", "tail" : "(): Int", "member" : "lzwpack.Dict.nextCode", "link" : "lzwpack\/Dict.html#nextCode:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/Dict.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/Dict.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/Dict.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/Dict.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/Dict.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/Dict.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/Dict.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Dict.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Dict.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Dict.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/Dict.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/Dict.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/Dict.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/Dict.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/Dict.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/Dict.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/Dict.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/Dict.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/Dict.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "find", "tail" : "(code: Code): Option[K]", "member" : "lzwpack.Dict.find", "link" : "lzwpack\/Dict.html#find(code:lzwpack.Code):Option[K]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(key: K): Code", "member" : "lzwpack.Dict.get", "link" : "lzwpack\/Dict.html#get(key:K):lzwpack.Code", "kind" : "abstract def"}, {"label" : "currentCode", "tail" : "(): Int", "member" : "lzwpack.Dict.currentCode", "link" : "lzwpack\/Dict.html#currentCode:Int", "kind" : "abstract def"}, {"label" : "add", "tail" : "(key: K): Dict[K]", "member" : "lzwpack.Dict.add", "link" : "lzwpack\/Dict.html#add(key:K):lzwpack.Dict[K]", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(key: K): Boolean", "member" : "lzwpack.Dict.contains", "link" : "lzwpack\/Dict.html#contains(key:K):Boolean", "kind" : "abstract def"}], "shortDescription" : "A dict is a set of keys that have an associated monotonic unique code.", "trait" : "lzwpack\/Dict.html", "kind" : "trait"}, {"name" : "lzwpack.DictInstances", "members_trait" : [{"label" : "makeDecompressionDict", "tail" : ": MakeDict[DecompressionDict]", "member" : "lzwpack.DictInstances.makeDecompressionDict", "link" : "lzwpack\/DictInstances.html#makeDecompressionDict:lzwpack.MakeDict[lzwpack.DecompressionDict]", "kind" : "implicit val"}, {"label" : "makeCompressionDict", "tail" : ": MakeDict[CompressionDict]", "member" : "lzwpack.DictInstances.makeCompressionDict", "link" : "lzwpack\/DictInstances.html#makeCompressionDict:lzwpack.MakeDict[lzwpack.CompressionDict]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/DictInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/DictInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/DictInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/DictInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/DictInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/DictInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/DictInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DictInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DictInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/DictInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/DictInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/DictInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/DictInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/DictInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/DictInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/DictInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/DictInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/DictInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/DictInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "lzwpack\/DictInstances.html", "kind" : "trait"}, {"name" : "lzwpack.Format", "shortDescription" : "Packs a stream of bits into a byte sequence so that a byte can contain multiple bit sequences.", "object" : "lzwpack\/Format$.html", "members_object" : [{"label" : "unpack", "tail" : "(alphabet: Alphabet[Byte]): Pipe[F, Byte, Code]", "member" : "lzwpack.Format.unpack", "link" : "lzwpack\/Format$.html#unpack[F[_]](implicitalphabet:lzwpack.Alphabet[Byte]):fs2.Pipe[F,Byte,lzwpack.Code]", "kind" : "def"}, {"label" : "combinedBuffer", "tail" : "(segment: Segment[BitBuffer, _])(init: BitBuffer): Segment[Nothing, BitBuffer]", "member" : "lzwpack.Format.combinedBuffer", "link" : "lzwpack\/Format$.html#combinedBuffer(segment:fs2.Segment[lzwpack.data.BitBuffer,_])(init:lzwpack.data.BitBuffer):fs2.Segment[Nothing,lzwpack.data.BitBuffer]", "kind" : "def"}, {"label" : "unpackSegment", "tail" : "(state: UnpackState): Segment[Code, Option[UnpackState]]", "member" : "lzwpack.Format.unpackSegment", "link" : "lzwpack\/Format$.html#unpackSegment(state:lzwpack.Format.UnpackState):fs2.Segment[lzwpack.Code,Option[lzwpack.Format.UnpackState]]", "kind" : "def"}, {"label" : "unpack1", "tail" : "(state: UnpackState): Option[(UnpackState, Code)]", "member" : "lzwpack.Format.unpack1", "link" : "lzwpack\/Format$.html#unpack1(state:lzwpack.Format.UnpackState):Option[(lzwpack.Format.UnpackState,lzwpack.Code)]", "kind" : "def"}, {"label" : "UnpackState", "tail" : "", "member" : "lzwpack.Format.UnpackState", "link" : "lzwpack\/Format$.html#UnpackStateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "pack", "tail" : "(): Pipe[F, BitBuffer, Byte]", "member" : "lzwpack.Format.pack", "link" : "lzwpack\/Format$.html#pack[F[_]]:fs2.Pipe[F,lzwpack.data.BitBuffer,Byte]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/Format$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/Format$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/Format$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/Format$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/Format$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/Format$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/Format$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Format$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Format$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/Format$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/Format$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/Format$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/Format$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/Format$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/Format$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/Format$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/Format$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/Format$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/Format$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.implicits.ByteImplicits.ByteOps", "shortDescription" : "", "members_class" : [{"label" : "unsigned", "tail" : "(): Int", "member" : "lzwpack.implicits.ByteImplicits.ByteOps.unsigned", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#unsigned:Int", "kind" : "def"}, {"member" : "lzwpack.implicits.ByteImplicits.ByteOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html", "kind" : "class"}, {"name" : "lzwpack.implicits.LongImplicits.LongOps", "shortDescription" : "", "members_class" : [{"label" : "hex", "tail" : "(): String", "member" : "lzwpack.implicits.LongImplicits.LongOps.hex", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#hex:String", "kind" : "def"}, {"label" : "bin", "tail" : "(size: Int): String", "member" : "lzwpack.implicits.LongImplicits.LongOps.bin", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#bin(size:Int):String", "kind" : "def"}, {"label" : "bin", "tail" : "(): String", "member" : "lzwpack.implicits.LongImplicits.LongOps.bin", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#bin:String", "kind" : "def"}, {"label" : "bitsize", "tail" : "(): Int", "member" : "lzwpack.implicits.LongImplicits.LongOps.bitsize", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#bitsize:Int", "kind" : "def"}, {"member" : "lzwpack.implicits.LongImplicits.LongOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/implicits\/LongImplicits$LongOps.html", "kind" : "class"}, {"name" : "lzwpack.implicits.StringImplicits.StringOps", "shortDescription" : "", "members_class" : [{"label" : "b", "tail" : "(_args: Any*): Int", "member" : "lzwpack.implicits.StringImplicits.StringOps.b", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#b(_args:Any*):Int", "kind" : "def"}, {"member" : "lzwpack.implicits.StringImplicits.StringOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/implicits\/StringImplicits$StringOps.html", "kind" : "class"}, {"name" : "lzwpack.LZW", "shortDescription" : "", "object" : "lzwpack\/LZW$.html", "members_object" : [{"label" : "decompress", "tail" : "(alphabet: Alphabet[Byte]): Pipe[F, Code, Byte]", "member" : "lzwpack.LZW.decompress", "link" : "lzwpack\/LZW$.html#decompress[F[_]](implicitalphabet:lzwpack.Alphabet[Byte]):fs2.Pipe[F,lzwpack.Code,Byte]", "kind" : "def"}, {"label" : "compress", "tail" : "(alphabet: Alphabet[Byte]): Pipe[F, Byte, BitBuffer]", "member" : "lzwpack.LZW.compress", "link" : "lzwpack\/LZW$.html#compress[F[_]](implicitalphabet:lzwpack.Alphabet[Byte]):fs2.Pipe[F,Byte,lzwpack.data.BitBuffer]", "kind" : "def"}, {"label" : "CodecF", "tail" : "", "member" : "lzwpack.LZW.CodecF", "link" : "lzwpack\/LZW$.html#CodecF[I,O]=(lzwpack.LZW.CompressionState,Option[I])=>(lzwpack.LZW.CompressionState,fs2.Chunk[O])", "kind" : "type"}, {"label" : "CompressionState", "tail" : "", "member" : "lzwpack.LZW.CompressionState", "link" : "lzwpack\/LZW$.html#CompressionStateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/LZW$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/LZW$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/LZW$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/LZW$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/LZW$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/LZW$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/LZW$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/LZW$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/LZW$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/LZW$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/LZW$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/LZW$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/LZW$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/LZW$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/LZW$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/LZW$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/LZW$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/LZW$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/LZW$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.MakeDict", "members_trait" : [{"label" : "fromAlphabet", "tail" : "(alphabet: Alphabet[A])(arg0: Hash[A]): Dict[A]", "member" : "lzwpack.MakeDict.fromAlphabet", "link" : "lzwpack\/MakeDict.html#fromAlphabet[A](alphabet:lzwpack.Alphabet[A])(implicitevidence$2:cats.Hash[A]):lzwpack.Dict[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/MakeDict.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/MakeDict.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/MakeDict.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/MakeDict.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/MakeDict.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/MakeDict.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/MakeDict.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/MakeDict.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/MakeDict.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/MakeDict.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/MakeDict.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/MakeDict.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/MakeDict.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/MakeDict.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/MakeDict.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/MakeDict.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/MakeDict.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/MakeDict.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/MakeDict.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "empty", "tail" : "(arg0: Hash[A]): Dict[A]", "member" : "lzwpack.MakeDict.empty", "link" : "lzwpack\/MakeDict.html#empty[A](implicitevidence$1:cats.Hash[A]):lzwpack.Dict[A]", "kind" : "abstract def"}], "shortDescription" : "The MakeDict trait provides generic dictionary constructors; given a MakeDict we can constructan empty T[A] or a T[A] that contains the given alphabet.", "trait" : "lzwpack\/MakeDict.html", "kind" : "trait"}], "lzwpack.bench" : [{"name" : "lzwpack.bench.CompressionBenchmarks", "shortDescription" : "", "members_class" : [{"label" : "decompressPtt5", "tail" : "(): Unit", "member" : "lzwpack.bench.CompressionBenchmarks.decompressPtt5", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#decompressPtt5():Unit", "kind" : "def"}, {"label" : "compressPtt5", "tail" : "(): Unit", "member" : "lzwpack.bench.CompressionBenchmarks.compressPtt5", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#compressPtt5():Unit", "kind" : "def"}, {"label" : "unpackAlice29", "tail" : "(): Unit", "member" : "lzwpack.bench.CompressionBenchmarks.unpackAlice29", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#unpackAlice29():Unit", "kind" : "def"}, {"label" : "decompressAlice29", "tail" : "(): Unit", "member" : "lzwpack.bench.CompressionBenchmarks.decompressAlice29", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#decompressAlice29():Unit", "kind" : "def"}, {"label" : "compressAlice29WithoutPack", "tail" : "(): Unit", "member" : "lzwpack.bench.CompressionBenchmarks.compressAlice29WithoutPack", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#compressAlice29WithoutPack():Unit", "kind" : "def"}, {"label" : "compressAlice29", "tail" : "(): Unit", "member" : "lzwpack.bench.CompressionBenchmarks.compressAlice29", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#compressAlice29():Unit", "kind" : "def"}, {"label" : "benchmarkDecompress", "tail" : "(fixture: Path): IO[Unit]", "member" : "lzwpack.bench.CompressionBenchmarks.benchmarkDecompress", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#benchmarkDecompress(fixture:java.nio.file.Path):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "benchmarkCompress", "tail" : "(fixture: Path): IO[Unit]", "member" : "lzwpack.bench.CompressionBenchmarks.benchmarkCompress", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#benchmarkCompress(fixture:java.nio.file.Path):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "sink", "tail" : ": Sink[IO, Byte]", "member" : "lzwpack.bench.CompressionBenchmarks.sink", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#sink:fs2.Sink[cats.effect.IO,Byte]", "kind" : "val"}, {"member" : "lzwpack.bench.CompressionBenchmarks#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/bench\/CompressionBenchmarks.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/bench\/CompressionBenchmarks.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/bench\/CompressionBenchmarks.html", "kind" : "class"}], "lzwpack.data" : [{"name" : "lzwpack.data.::", "shortDescription" : "", "object" : "lzwpack\/data\/$colon$colon$.html", "members_object" : [{"label" : "unapply", "tail" : "(as: ListVector[A]): Option[(A, ListVector[A])]", "member" : "lzwpack.data.::.unapply", "link" : "lzwpack\/data\/$colon$colon$.html#unapply[A](as:lzwpack.data.ListVector[A]):Option[(A,lzwpack.data.ListVector[A])]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/$colon$colon$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/$colon$colon$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/$colon$colon$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/$colon$colon$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/$colon$colon$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/$colon$colon$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/$colon$colon$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/$colon$colon$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/$colon$colon$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/$colon$colon$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/$colon$colon$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/$colon$colon$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/$colon$colon$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/$colon$colon$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/$colon$colon$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/$colon$colon$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/$colon$colon$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/$colon$colon$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/$colon$colon$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.data.Binary", "shortDescription" : "", "object" : "lzwpack\/data\/Binary$.html", "members_object" : [{"label" : "bitsize", "tail" : "(n: Long): Int", "member" : "lzwpack.data.Binary.bitsize", "link" : "lzwpack\/data\/Binary$.html#bitsize(n:Long):Int", "kind" : "def"}, {"label" : "bitmask", "tail" : "(n: Long): Long", "member" : "lzwpack.data.Binary.bitmask", "link" : "lzwpack\/data\/Binary$.html#bitmask(n:Long):Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/Binary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/Binary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/Binary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/Binary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/Binary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/Binary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/Binary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/Binary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/Binary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/Binary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/Binary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/Binary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/Binary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/Binary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/Binary$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/Binary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/Binary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/Binary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/Binary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.data.BitBuffer", "shortDescription" : "A BitBuffer is a bit sequence backed by a 64-bit scala.Long.", "object" : "lzwpack\/data\/BitBuffer$.html", "members_object" : [{"label" : "empty", "tail" : ": BitBuffer", "member" : "lzwpack.data.BitBuffer.empty", "link" : "lzwpack\/data\/BitBuffer$.html#empty:lzwpack.data.BitBuffer", "kind" : "lazy val"}, {"label" : "tupled", "tail" : "(t: (Int, Int)): BitBuffer", "member" : "lzwpack.data.BitBuffer.tupled", "link" : "lzwpack\/data\/BitBuffer$.html#tupled(t:(Int,Int)):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "apply", "tail" : "(data: Int): BitBuffer", "member" : "lzwpack.data.BitBuffer.apply", "link" : "lzwpack\/data\/BitBuffer$.html#apply(data:Int):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "apply", "tail" : "(b: Byte): BitBuffer", "member" : "lzwpack.data.BitBuffer.apply", "link" : "lzwpack\/data\/BitBuffer$.html#apply(b:Byte):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/BitBuffer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/BitBuffer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/BitBuffer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/BitBuffer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/BitBuffer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/BitBuffer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/BitBuffer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BitBuffer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BitBuffer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BitBuffer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/BitBuffer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/BitBuffer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/BitBuffer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/BitBuffer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/BitBuffer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/BitBuffer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/BitBuffer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/BitBuffer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/BitBuffer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "lzwpack.data.BitBuffer.toString", "link" : "lzwpack\/data\/BitBuffer.html#toString():String", "kind" : "def"}, {"label" : "drain", "tail" : "(chunkSize: Int): (BitBuffer, Array[Int])", "member" : "lzwpack.data.BitBuffer.drain", "link" : "lzwpack\/data\/BitBuffer.html#drain(chunkSize:Int):(lzwpack.data.BitBuffer,Array[Int])", "kind" : "def"}, {"label" : "++", "tail" : "(other: BitBuffer): BitBuffer", "member" : "lzwpack.data.BitBuffer.++", "link" : "lzwpack\/data\/BitBuffer.html#++(other:lzwpack.data.BitBuffer):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "append", "tail" : "(other: BitBuffer): BitBuffer", "member" : "lzwpack.data.BitBuffer.append", "link" : "lzwpack\/data\/BitBuffer.html#append(other:lzwpack.data.BitBuffer):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "toByte", "tail" : "(): Byte", "member" : "lzwpack.data.BitBuffer.toByte", "link" : "lzwpack\/data\/BitBuffer.html#toByte:Byte", "kind" : "def"}, {"label" : "toInt", "tail" : "(): Int", "member" : "lzwpack.data.BitBuffer.toInt", "link" : "lzwpack\/data\/BitBuffer.html#toInt:Int", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BitBuffer", "member" : "lzwpack.data.BitBuffer.take", "link" : "lzwpack\/data\/BitBuffer.html#take(n:Int):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BitBuffer", "member" : "lzwpack.data.BitBuffer.drop", "link" : "lzwpack\/data\/BitBuffer.html#drop(n:Int):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "readByte", "tail" : "(): (BitBuffer, Byte)", "member" : "lzwpack.data.BitBuffer.readByte", "link" : "lzwpack\/data\/BitBuffer.html#readByte:(lzwpack.data.BitBuffer,Byte)", "kind" : "def"}, {"label" : "readOption", "tail" : "(bits: Int): Option[(BitBuffer, Int)]", "member" : "lzwpack.data.BitBuffer.readOption", "link" : "lzwpack\/data\/BitBuffer.html#readOption(bits:Int):Option[(lzwpack.data.BitBuffer,Int)]", "kind" : "def"}, {"label" : "read", "tail" : "(bits: Int, allowFewer: Boolean): (BitBuffer, Code)", "member" : "lzwpack.data.BitBuffer.read", "link" : "lzwpack\/data\/BitBuffer.html#read(bits:Int,allowFewer:Boolean):(lzwpack.data.BitBuffer,lzwpack.Code)", "kind" : "def"}, {"member" : "lzwpack.data.BitBuffer#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": Int", "member" : "lzwpack.data.BitBuffer.size", "link" : "lzwpack\/data\/BitBuffer.html#size:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/BitBuffer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/BitBuffer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/BitBuffer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/BitBuffer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/BitBuffer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/BitBuffer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/BitBuffer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BitBuffer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BitBuffer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BitBuffer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/BitBuffer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/BitBuffer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/BitBuffer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/BitBuffer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/BitBuffer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/BitBuffer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "lzwpack\/data\/BitBuffer.html", "kind" : "case class"}, {"name" : "lzwpack.data.BufferInstances", "members_trait" : [{"label" : "bitBufferShow", "tail" : ": Show[BitBuffer]", "member" : "lzwpack.data.BufferInstances.bitBufferShow", "link" : "lzwpack\/data\/BufferInstances.html#bitBufferShow:cats.Show[lzwpack.data.BitBuffer]", "kind" : "implicit val"}, {"label" : "BufferMonoid", "tail" : "", "member" : "lzwpack.data.BufferInstances.BufferMonoid", "link" : "lzwpack\/data\/BufferInstances.html#BufferMonoid", "kind" : "implicit object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/BufferInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/BufferInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/BufferInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/BufferInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/BufferInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/BufferInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/BufferInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BufferInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BufferInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BufferInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/BufferInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/BufferInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/BufferInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/BufferInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/BufferInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/BufferInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/BufferInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/BufferInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/BufferInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "lzwpack\/data\/BufferInstances.html", "kind" : "trait"}, {"name" : "lzwpack.data.BufferInstances.BufferMonoid", "shortDescription" : "A BitBuffer forms a monoid under concatenation and an empty buffer.", "object" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html", "members_object" : [{"label" : "combine", "tail" : "(a: BitBuffer, b: BitBuffer): BitBuffer", "member" : "lzwpack.data.BufferInstances.BufferMonoid.combine", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#combine(a:lzwpack.data.BitBuffer,b:lzwpack.data.BitBuffer):lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "empty", "tail" : "(): BitBuffer", "member" : "lzwpack.data.BufferInstances.BufferMonoid.empty", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#empty:lzwpack.data.BitBuffer", "kind" : "def"}, {"label" : "combineAllOption", "tail" : "(as: TraversableOnce[BitBuffer]): Option[BitBuffer]", "member" : "cats.kernel.Monoid.combineAllOption", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#combineAllOption(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(as: TraversableOnce[BitBuffer]): BitBuffer", "member" : "cats.kernel.Monoid.combineAll", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#combineAll(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: BitBuffer, n: Int): BitBuffer", "member" : "cats.kernel.Monoid.combineN", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: BitBuffer)(ev: Eq[BitBuffer]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: BitBuffer, n: Int): BitBuffer", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/BufferInstances$BufferMonoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.data.HashMapVector", "shortDescription" : "A HashMapVector is a hash map implementation on top of a bit-indexed trie.", "object" : "lzwpack\/data\/HashMapVector$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "lzwpack.data.HashMapVector.toString", "link" : "lzwpack\/data\/HashMapVector.html#toString():String", "kind" : "def"}, {"label" : "find", "tail" : "(f: (K, V) ⇒ Boolean): Option[(K, V)]", "member" : "lzwpack.data.HashMapVector.find", "link" : "lzwpack\/data\/HashMapVector.html#find(f:(K,V)=>Boolean):Option[(K,V)]", "kind" : "def"}, {"label" : "fold", "tail" : "(init: ⇒ B)(f: ((K, V), ⇒ B) ⇒ B): B", "member" : "lzwpack.data.HashMapVector.fold", "link" : "lzwpack\/data\/HashMapVector.html#fold[B](init:=>B)(f:((K,V),=>B)=>B):B", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "lzwpack.data.HashMapVector.isEmpty", "link" : "lzwpack\/data\/HashMapVector.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : ": Int", "member" : "lzwpack.data.HashMapVector.size", "link" : "lzwpack\/data\/HashMapVector.html#size:Int", "kind" : "lazy val"}, {"label" : "+", "tail" : "(kv: (K, V)): HashMapVector[K, V]", "member" : "lzwpack.data.HashMapVector.+", "link" : "lzwpack\/data\/HashMapVector.html#+(kv:(K,V)):lzwpack.data.HashMapVector[K,V]", "kind" : "def"}, {"label" : "updated", "tail" : "(kv: (K, V)): HashMapVector[K, V]", "member" : "lzwpack.data.HashMapVector.updated", "link" : "lzwpack\/data\/HashMapVector.html#updated(kv:(K,V)):lzwpack.data.HashMapVector[K,V]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K): Option[V]", "member" : "lzwpack.data.HashMapVector.get", "link" : "lzwpack\/data\/HashMapVector.html#get(key:K):Option[V]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: K): Boolean", "member" : "lzwpack.data.HashMapVector.contains", "link" : "lzwpack\/data\/HashMapVector.html#contains(key:K):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(key: K): V", "member" : "lzwpack.data.HashMapVector.apply", "link" : "lzwpack\/data\/HashMapVector.html#apply(key:K):V", "kind" : "def"}, {"label" : "Bucket", "tail" : "", "member" : "lzwpack.data.HashMapVector.Bucket", "link" : "lzwpack\/data\/HashMapVector.html#Bucket=lzwpack.data.ListVector[(K,V)]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/HashMapVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/HashMapVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/HashMapVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/HashMapVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/HashMapVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/HashMapVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/HashMapVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/HashMapVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/HashMapVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/HashMapVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/HashMapVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/HashMapVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/HashMapVector.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/HashMapVector.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/HashMapVector.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/HashMapVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/HashMapVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/HashMapVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(arg0: Hash[K]): HashMapVector[K, V]", "member" : "lzwpack.data.HashMapVector.empty", "link" : "lzwpack\/data\/HashMapVector$.html#empty[K,V](implicitevidence$3:cats.Hash[K]):lzwpack.data.HashMapVector[K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(kvs: (K, V)*)(arg0: Hash[K]): HashMapVector[K, V]", "member" : "lzwpack.data.HashMapVector.apply", "link" : "lzwpack\/data\/HashMapVector$.html#apply[K,V](kvs:(K,V)*)(implicitevidence$2:cats.Hash[K]):lzwpack.data.HashMapVector[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/HashMapVector$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/HashMapVector$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/HashMapVector$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/HashMapVector$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/HashMapVector$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/HashMapVector$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/HashMapVector$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/HashMapVector$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/HashMapVector$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/HashMapVector$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/HashMapVector$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/HashMapVector$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/HashMapVector$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/HashMapVector$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/HashMapVector$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/HashMapVector$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/HashMapVector$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/HashMapVector$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/HashMapVector$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/data\/HashMapVector.html", "kind" : "class"}, {"name" : "lzwpack.data.ListVector", "shortDescription" : "A ListVector is a list-like data structure in the sense that it providesefficient random access and append; prepend is not yet supported.", "object" : "lzwpack\/data\/ListVector$.html", "members_class" : [{"label" : "toSeq", "tail" : ": Seq[A]", "member" : "lzwpack.data.ListVector.toSeq", "link" : "lzwpack\/data\/ListVector.html#toSeq:Seq[A]", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "lzwpack.data.ListVector.hashCode", "link" : "lzwpack\/data\/ListVector.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "toString", "tail" : ": String", "member" : "lzwpack.data.ListVector.toString", "link" : "lzwpack\/data\/ListVector.html#toString:String", "kind" : "lazy val"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): ListVector[B]", "member" : "lzwpack.data.ListVector.map", "link" : "lzwpack\/data\/ListVector.html#map[B](f:A=>B):lzwpack.data.ListVector[B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "lzwpack.data.ListVector.iterator", "link" : "lzwpack\/data\/ListVector.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(init: ⇒ B)(f: (A, ⇒ B) ⇒ B): B", "member" : "lzwpack.data.ListVector.foldRight", "link" : "lzwpack\/data\/ListVector.html#foldRight[B](init:=>B)(f:(A,=>B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(init: B)(f: (B, A) ⇒ B): B", "member" : "lzwpack.data.ListVector.foldLeft", "link" : "lzwpack\/data\/ListVector.html#foldLeft[B](init:B)(f:(B,A)=>B):B", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "lzwpack.data.ListVector.isEmpty", "link" : "lzwpack\/data\/ListVector.html#isEmpty:Boolean", "kind" : "def"}, {"label" : ":+", "tail" : "(a: A): ListVector[A]", "member" : "lzwpack.data.ListVector.:+", "link" : "lzwpack\/data\/ListVector.html#:+(a:A):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "+", "tail" : "(a: A): ListVector[A]", "member" : "lzwpack.data.ListVector.+", "link" : "lzwpack\/data\/ListVector.html#+(a:A):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(i: Int): Boolean", "member" : "lzwpack.data.ListVector.contains", "link" : "lzwpack\/data\/ListVector.html#contains(i:Int):Boolean", "kind" : "def"}, {"label" : "get", "tail" : "(i: Int): Option[A]", "member" : "lzwpack.data.ListVector.get", "link" : "lzwpack\/data\/ListVector.html#get(i:Int):Option[A]", "kind" : "def"}, {"label" : "append", "tail" : "(a: A): ListVector[A]", "member" : "lzwpack.data.ListVector.append", "link" : "lzwpack\/data\/ListVector.html#append(a:A):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ListVector[A]", "member" : "lzwpack.data.ListVector.take", "link" : "lzwpack\/data\/ListVector.html#take(n:Int):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ListVector[A]", "member" : "lzwpack.data.ListVector.drop", "link" : "lzwpack\/data\/ListVector.html#drop(n:Int):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "tail", "tail" : ": ListVector[A]", "member" : "lzwpack.data.ListVector.tail", "link" : "lzwpack\/data\/ListVector.html#tail:lzwpack.data.ListVector[A]", "kind" : "lazy val"}, {"label" : "headOption", "tail" : ": Option[A]", "member" : "lzwpack.data.ListVector.headOption", "link" : "lzwpack\/data\/ListVector.html#headOption:Option[A]", "kind" : "lazy val"}, {"label" : "head", "tail" : ": A", "member" : "lzwpack.data.ListVector.head", "link" : "lzwpack\/data\/ListVector.html#head:A", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): A", "member" : "lzwpack.data.ListVector.apply", "link" : "lzwpack\/data\/ListVector.html#apply(i:Int):A", "kind" : "def"}, {"label" : "find", "tail" : "(f: (A) ⇒ Boolean): Option[A]", "member" : "lzwpack.data.ListVector.find", "link" : "lzwpack\/data\/ListVector.html#find(f:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "concat", "tail" : "(as1: ListVector[A]): ListVector[A]", "member" : "lzwpack.data.ListVector.concat", "link" : "lzwpack\/data\/ListVector.html#concat(as1:lzwpack.data.ListVector[A]):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (A) ⇒ Boolean): ListVector[A]", "member" : "lzwpack.data.ListVector.filter", "link" : "lzwpack\/data\/ListVector.html#filter(f:A=>Boolean):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "size", "tail" : ": Int", "member" : "lzwpack.data.ListVector.size", "link" : "lzwpack\/data\/ListVector.html#size:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/ListVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/ListVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/ListVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/ListVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/ListVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/ListVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/ListVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/ListVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/ListVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/ListVector.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/ListVector.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/ListVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/ListVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/ListVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "range", "tail" : "(from: A, to: A)(arg0: Integral[A], integral: Integral[A]): ListVector[A]", "member" : "lzwpack.data.ListVector.range", "link" : "lzwpack\/data\/ListVector$.html#range[A](from:A,to:A)(implicitevidence$1:Integral[A],implicitintegral:Integral[A]):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) ⇒ Option[(A, S)]): ListVector[A]", "member" : "lzwpack.data.ListVector.unfold", "link" : "lzwpack\/data\/ListVector$.html#unfold[A,S](init:S)(f:S=>Option[(A,S)]):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "seq", "tail" : "(as: Seq[A]): ListVector[A]", "member" : "lzwpack.data.ListVector.seq", "link" : "lzwpack\/data\/ListVector$.html#seq[A](as:Seq[A]):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(as: A*): ListVector[A]", "member" : "lzwpack.data.ListVector.apply", "link" : "lzwpack\/data\/ListVector$.html#apply[A](as:A*):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): ListVector[A]", "member" : "lzwpack.data.ListVector.empty", "link" : "lzwpack\/data\/ListVector$.html#empty[A]:lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/ListVector$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/ListVector$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/ListVector$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/ListVector$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/ListVector$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/ListVector$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/ListVector$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVector$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVector$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVector$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/ListVector$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/ListVector$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/ListVector$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/ListVector$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/ListVector$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/ListVector$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/ListVector$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/ListVector$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/ListVector$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/data\/ListVector.html", "kind" : "class"}, {"name" : "lzwpack.data.ListVectorInstances", "members_trait" : [{"label" : "toSeq", "tail" : "(as: ListVector[A]): Seq[A]", "member" : "lzwpack.data.ListVectorInstances.toSeq", "link" : "lzwpack\/data\/ListVectorInstances.html#toSeq[A](as:lzwpack.data.ListVector[A]):Seq[A]", "kind" : "implicit def"}, {"label" : "ListVectorEq", "tail" : "(arg0: Eq[A]): Eq[ListVector[A]]", "member" : "lzwpack.data.ListVectorInstances.ListVectorEq", "link" : "lzwpack\/data\/ListVectorInstances.html#ListVectorEq[A](implicitevidence$4:cats.Eq[A]):cats.Eq[lzwpack.data.ListVector[A]]", "kind" : "implicit def"}, {"label" : "ListVectorHash", "tail" : "(arg0: Hash[A]): Hash[ListVector[A]]", "member" : "lzwpack.data.ListVectorInstances.ListVectorHash", "link" : "lzwpack\/data\/ListVectorInstances.html#ListVectorHash[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[lzwpack.data.ListVector[A]]", "kind" : "implicit def"}, {"label" : "ListVectorShow", "tail" : "(arg0: Show[A]): Show[ListVector[A]]", "member" : "lzwpack.data.ListVectorInstances.ListVectorShow", "link" : "lzwpack\/data\/ListVectorInstances.html#ListVectorShow[A](implicitevidence$2:cats.Show[A]):cats.Show[lzwpack.data.ListVector[A]]", "kind" : "implicit def"}, {"label" : "ListVectorApplicative", "tail" : "", "member" : "lzwpack.data.ListVectorInstances.ListVectorApplicative", "link" : "lzwpack\/data\/ListVectorInstances.html#ListVectorApplicative", "kind" : "implicit object"}, {"label" : "ListVectorMonoid", "tail" : "(): Monoid[ListVector[A]]", "member" : "lzwpack.data.ListVectorInstances.ListVectorMonoid", "link" : "lzwpack\/data\/ListVectorInstances.html#ListVectorMonoid[A]:cats.Monoid[lzwpack.data.ListVector[A]]", "kind" : "implicit def"}, {"label" : "ListVectorTraverse", "tail" : "", "member" : "lzwpack.data.ListVectorInstances.ListVectorTraverse", "link" : "lzwpack\/data\/ListVectorInstances.html#ListVectorTraverse", "kind" : "implicit object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/ListVectorInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/ListVectorInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/ListVectorInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/ListVectorInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/ListVectorInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/ListVectorInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/ListVectorInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/ListVectorInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/ListVectorInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/ListVectorInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/ListVectorInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/ListVectorInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/ListVectorInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/ListVectorInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/ListVectorInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/ListVectorInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines some generic type class instances for ListVector.", "trait" : "lzwpack\/data\/ListVectorInstances.html", "kind" : "trait"}, {"name" : "lzwpack.data.ListVectorInstances.ListVectorApplicative", "shortDescription" : "", "object" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html", "members_object" : [{"label" : "ap", "tail" : "(ff: ListVector[(A) ⇒ B])(fa: ListVector[A]): ListVector[B]", "member" : "lzwpack.data.ListVectorInstances.ListVectorApplicative.ap", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap[A,B](ff:lzwpack.data.ListVector[A=>B])(fa:lzwpack.data.ListVector[A]):lzwpack.data.ListVector[B]", "kind" : "def"}, {"label" : "pure", "tail" : "(x: A): ListVector[A]", "member" : "lzwpack.data.ListVectorInstances.ListVectorApplicative.pure", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#pure[A](x:A):lzwpack.data.ListVector[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ ListVector[A]): ListVector[Unit]", "member" : "cats.Applicative.whenA", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ ListVector[A]): ListVector[Unit]", "member" : "cats.Applicative.unlessA", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]ListVector[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]ListVector[G[α]]]", "member" : "cats.Applicative.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: ListVector[A]): ListVector[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B): ListVector[B]", "member" : "cats.Applicative.map", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "unit", "tail" : "(): ListVector[Unit]", "member" : "cats.Applicative.unit", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): ListVector[A]", "member" : "cats.InvariantMonoidal.point", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]ListVector[G[α]]]", "member" : "cats.Apply.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: ListVector[A], fb: Eval[ListVector[B]])(f: (A, B) ⇒ Z): Eval[ListVector[Z]]", "member" : "cats.Apply.map2Eval", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: ListVector[A], fb: ListVector[B])(f: (A, B) ⇒ Z): ListVector[Z]", "member" : "cats.Apply.map2", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: ListVector[(A, B) ⇒ Z])(fa: ListVector[A], fb: ListVector[B]): ListVector[Z]", "member" : "cats.Apply.ap2", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: ListVector[A])(fb: ListVector[B]): ListVector[A]", "member" : "cats.Apply.forEffect", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: ListVector[A])(fb: ListVector[B]): ListVector[B]", "member" : "cats.Apply.followedBy", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: ListVector[A])(fb: ListVector[B]): ListVector[A]", "member" : "cats.Apply.<*", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: ListVector[A])(fb: ListVector[B]): ListVector[B]", "member" : "cats.Apply.*>", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: ListVector[(A) ⇒ B])(fa: ListVector[A]): ListVector[B]", "member" : "cats.Apply.<*>", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: ListVector[A], fb: ListVector[B]): ListVector[(A, B)]", "member" : "cats.Apply.product", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: ListVector[A])(fb: ListVector[B]): ListVector[A]", "member" : "cats.Apply.productL", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: ListVector[A])(fb: ListVector[B]): ListVector[B]", "member" : "cats.Apply.productR", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19], f20: ListVector[A20], f21: ListVector[A21]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19], f20: ListVector[A20], f21: ListVector[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19], f20: ListVector[A20], f21: ListVector[A21]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19], f20: ListVector[A20]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19], f20: ListVector[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19], f20: ListVector[A20]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18], f19: ListVector[A19]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17], f18: ListVector[A18]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16], f17: ListVector[A17]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15], f16: ListVector[A16]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14], f15: ListVector[A15]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13], f14: ListVector[A14]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12], f13: ListVector[A13]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11], f12: ListVector[A12]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10], f11: ListVector[A11]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9], f10: ListVector[A10]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8], f9: ListVector[A9]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7], f8: ListVector[A8]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7]): ListVector[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6], f7: ListVector[A7]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6]): ListVector[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5], f6: ListVector[A6]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5]): ListVector[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4], f5: ListVector[A5]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4]): ListVector[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: ListVector[(A0, A1, A2, A3, A4) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3], f4: ListVector[A4]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3]): ListVector[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3])(f: (A0, A1, A2, A3) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: ListVector[(A0, A1, A2, A3) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2], f3: ListVector[A3]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2]): ListVector[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2])(f: (A0, A1, A2) ⇒ Z): ListVector[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: ListVector[(A0, A1, A2) ⇒ Z])(f0: ListVector[A0], f1: ListVector[A1], f2: ListVector[A2]): ListVector[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: ListVector[A], f2: ListVector[B]): ListVector[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]ListVector[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]ListVector[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]ListVector[G[α]]]", "member" : "cats.Functor.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: ListVector[A], b: B): ListVector[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: ListVector[A], b: B): ListVector[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: ListVector[A], b: B): ListVector[B]", "member" : "cats.Functor.as", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B): ListVector[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: ListVector[A]): ListVector[Unit]", "member" : "cats.Functor.void", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (ListVector[A]) ⇒ ListVector[B]", "member" : "cats.Functor.lift", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: ListVector[A]): ListVector[B]", "member" : "cats.Functor.widen", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B): ListVector[B]", "member" : "cats.Functor.fmap", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B)(g: (B) ⇒ A): ListVector[B]", "member" : "cats.Functor.imap", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]ListVector[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]ListVector[G[α]]]", "member" : "cats.Invariant.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorApplicative$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.data.ListVectorInstances.ListVectorTraverse", "shortDescription" : "", "object" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html", "members_object" : [{"label" : "foldRight", "tail" : "(fa: ListVector[A], init: Eval[B])(f: (A, Eval[B]) ⇒ Eval[B]): Eval[B]", "member" : "lzwpack.data.ListVectorInstances.ListVectorTraverse.foldRight", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#foldRight[A,B](fa:lzwpack.data.ListVector[A],init:cats.Eval[B])(f:(A,cats.Eval[B])=>cats.Eval[B]):cats.Eval[B]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(fa: ListVector[A], b: B)(f: (B, A) ⇒ B): B", "member" : "lzwpack.data.ListVectorInstances.ListVectorTraverse.foldLeft", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#foldLeft[A,B](fa:lzwpack.data.ListVector[A],b:B)(f:(B,A)=>B):B", "kind" : "def"}, {"label" : "traverse", "tail" : "(fa: ListVector[A])(f: (A) ⇒ F[B])(arg0: Applicative[F]): F[ListVector[B]]", "member" : "lzwpack.data.ListVectorInstances.ListVectorTraverse.traverse", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#traverse[F[_],A,B](fa:lzwpack.data.ListVector[A])(f:A=>F[B])(implicitevidence$1:cats.Applicative[F]):F[lzwpack.data.ListVector[B]]", "kind" : "def"}, {"label" : "unorderedSequence", "tail" : "(fga: ListVector[G[A]])(arg0: CommutativeApplicative[G]): G[ListVector[A]]", "member" : "cats.Traverse.unorderedSequence", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#unorderedSequence[G[_],A](fga:F[G[A]])(implicitevidence$5:cats.CommutativeApplicative[G]):G[F[A]]", "kind" : "def"}, {"label" : "unorderedTraverse", "tail" : "(sa: ListVector[A])(f: (A) ⇒ G[B])(arg0: CommutativeApplicative[G]): G[ListVector[B]]", "member" : "cats.Traverse.unorderedTraverse", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#unorderedTraverse[G[_],A,B](sa:F[A])(f:A=>G[B])(implicitevidence$4:cats.CommutativeApplicative[G]):G[F[B]]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(fa: ListVector[A]): ListVector[(A, Int)]", "member" : "cats.Traverse.zipWithIndex", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#zipWithIndex[A](fa:F[A]):F[(A,Int)]", "kind" : "def"}, {"label" : "traverseWithIndexM", "tail" : "(fa: ListVector[A])(f: (A, Int) ⇒ G[B])(G: Monad[G]): G[ListVector[B]]", "member" : "cats.Traverse.traverseWithIndexM", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#traverseWithIndexM[G[_<:<?>],A,B](fa:F[A])(f:(A,Int)=>G[B])(implicitG:cats.Monad[G]):G[F[B]]", "kind" : "def"}, {"label" : "mapWithIndex", "tail" : "(fa: ListVector[A])(f: (A, Int) ⇒ B): ListVector[B]", "member" : "cats.Traverse.mapWithIndex", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#mapWithIndex[A,B](fa:F[A])(f:(A,Int)=>B):F[B]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B): ListVector[B]", "member" : "cats.Traverse.map", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Traverse[G]): Traverse[[α]ListVector[G[α]]]", "member" : "cats.Traverse.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#compose[G[_]](implicitevidence$3:cats.Traverse[G]):cats.Traverse[[α]F[G[α]]]", "kind" : "def"}, {"label" : "flatSequence", "tail" : "(fgfa: ListVector[G[ListVector[A]]])(G: Applicative[G], F: FlatMap[ListVector]): G[ListVector[A]]", "member" : "cats.Traverse.flatSequence", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#flatSequence[G[_<:<?>],A](fgfa:F[G[F[A]]])(implicitG:cats.Applicative[G],implicitF:cats.FlatMap[F]):G[F[A]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(fga: ListVector[G[A]])(arg0: Applicative[G]): G[ListVector[A]]", "member" : "cats.Traverse.sequence", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#sequence[G[_<:<?>],A](fga:F[G[A]])(implicitevidence$2:cats.Applicative[G]):G[F[A]]", "kind" : "def"}, {"label" : "flatTraverse", "tail" : "(fa: ListVector[A])(f: (A) ⇒ G[ListVector[B]])(G: Applicative[G], F: FlatMap[ListVector]): G[ListVector[B]]", "member" : "cats.Traverse.flatTraverse", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#flatTraverse[G[_<:<?>],A,B](fa:F[A])(f:A=>G[F[B]])(implicitG:cats.Applicative[G],implicitF:cats.FlatMap[F]):G[F[B]]", "kind" : "def"}, {"label" : "unorderedFoldMap", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B)(arg0: CommutativeMonoid[B]): B", "member" : "cats.Foldable.unorderedFoldMap", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#unorderedFoldMap[A,B](fa:F[A])(f:A=>B)(implicitevidence$5:cats.kernel.CommutativeMonoid[B]):B", "kind" : "def"}, {"label" : "unorderedFold", "tail" : "(fa: ListVector[A])(arg0: CommutativeMonoid[A]): A", "member" : "cats.Foldable.unorderedFold", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#unorderedFold[A](fa:F[A])(implicitevidence$4:cats.kernel.CommutativeMonoid[A]):A", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Foldable[G]): Foldable[[α]ListVector[G[α]]]", "member" : "cats.Foldable.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#compose[G[_]](implicitevidence$3:cats.Foldable[G]):cats.Foldable[[α]F[G[α]]]", "kind" : "def"}, {"label" : "intersperseList", "tail" : "(xs: List[A], x: A): List[A]", "member" : "cats.Foldable.intersperseList", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#intersperseList[A](xs:List[A],x:A):List[A]", "kind" : "def"}, {"label" : "intercalate", "tail" : "(fa: ListVector[A], a: A)(A: Monoid[A]): A", "member" : "cats.Foldable.intercalate", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#intercalate[A](fa:F[A],a:A)(implicitA:cats.Monoid[A]):A", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(fa: ListVector[A]): Boolean", "member" : "cats.Foldable.nonEmpty", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#nonEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(fa: ListVector[A]): Boolean", "member" : "cats.Foldable.isEmpty", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#isEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "dropWhile_", "tail" : "(fa: ListVector[A])(p: (A) ⇒ Boolean): List[A]", "member" : "cats.Foldable.dropWhile_", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#dropWhile_[A](fa:F[A])(p:A=>Boolean):List[A]", "kind" : "def"}, {"label" : "takeWhile_", "tail" : "(fa: ListVector[A])(p: (A) ⇒ Boolean): List[A]", "member" : "cats.Foldable.takeWhile_", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#takeWhile_[A](fa:F[A])(p:A=>Boolean):List[A]", "kind" : "def"}, {"label" : "filter_", "tail" : "(fa: ListVector[A])(p: (A) ⇒ Boolean): List[A]", "member" : "cats.Foldable.filter_", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#filter_[A](fa:F[A])(p:A=>Boolean):List[A]", "kind" : "def"}, {"label" : "partitionEither", "tail" : "(fa: ListVector[A])(f: (A) ⇒ Either[B, C])(A: Alternative[ListVector]): (ListVector[B], ListVector[C])", "member" : "cats.Foldable.partitionEither", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#partitionEither[A,B,C](fa:F[A])(f:A=>Either[B,C])(implicitA:cats.Alternative[F]):(F[B],F[C])", "kind" : "def"}, {"label" : "toList", "tail" : "(fa: ListVector[A]): List[A]", "member" : "cats.Foldable.toList", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#toList[A](fa:F[A]):List[A]", "kind" : "def"}, {"label" : "forallM", "tail" : "(fa: ListVector[A])(p: (A) ⇒ G[Boolean])(G: Monad[G]): G[Boolean]", "member" : "cats.Foldable.forallM", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#forallM[G[_<:<?>],A](fa:F[A])(p:A=>G[Boolean])(implicitG:cats.Monad[G]):G[Boolean]", "kind" : "def"}, {"label" : "existsM", "tail" : "(fa: ListVector[A])(p: (A) ⇒ G[Boolean])(G: Monad[G]): G[Boolean]", "member" : "cats.Foldable.existsM", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#existsM[G[_<:<?>],A](fa:F[A])(p:A=>G[Boolean])(implicitG:cats.Monad[G]):G[Boolean]", "kind" : "def"}, {"label" : "forall", "tail" : "(fa: ListVector[A])(p: (A) ⇒ Boolean): Boolean", "member" : "cats.Foldable.forall", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#forall[A](fa:F[A])(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(fa: ListVector[A])(p: (A) ⇒ Boolean): Boolean", "member" : "cats.Foldable.exists", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#exists[A](fa:F[A])(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(fa: ListVector[A])(f: (A) ⇒ Boolean): Option[A]", "member" : "cats.Foldable.find", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#find[A](fa:F[A])(f:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "foldK", "tail" : "(fga: ListVector[G[A]])(G: MonoidK[G]): G[A]", "member" : "cats.Foldable.foldK", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#foldK[G[_<:<?>],A](fga:F[G[A]])(implicitG:cats.MonoidK[G]):G[A]", "kind" : "def"}, {"label" : "sequence_", "tail" : "(fga: ListVector[G[A]])(arg0: Applicative[G]): G[Unit]", "member" : "cats.Foldable.sequence_", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#sequence_[G[_<:<?>],A](fga:F[G[A]])(implicitevidence$2:cats.Applicative[G]):G[Unit]", "kind" : "def"}, {"label" : "traverse_", "tail" : "(fa: ListVector[A])(f: (A) ⇒ G[B])(G: Applicative[G]): G[Unit]", "member" : "cats.Foldable.traverse_", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#traverse_[G[_<:<?>],A,B](fa:F[A])(f:A=>G[B])(implicitG:cats.Applicative[G]):G[Unit]", "kind" : "def"}, {"label" : "foldMapM", "tail" : "(fa: ListVector[A])(f: (A) ⇒ G[B])(G: Monad[G], B: Monoid[B]): G[B]", "member" : "cats.Foldable.foldMapM", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#foldMapM[G[_<:<?>],A,B](fa:F[A])(f:A=>G[B])(implicitG:cats.Monad[G],implicitB:cats.Monoid[B]):G[B]", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(fa: ListVector[A], z: B)(f: (B, A) ⇒ G[B])(G: Monad[G]): G[B]", "member" : "cats.Foldable.foldLeftM", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#foldLeftM[G[_<:<?>],A,B](fa:F[A],z:B)(f:(B,A)=>G[B])(implicitG:cats.Monad[G]):G[B]", "kind" : "final def"}, {"label" : "foldM", "tail" : "(fa: ListVector[A], z: B)(f: (B, A) ⇒ G[B])(G: Monad[G]): G[B]", "member" : "cats.Foldable.foldM", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#foldM[G[_<:<?>],A,B](fa:F[A],z:B)(f:(B,A)=>G[B])(implicitG:cats.Monad[G]):G[B]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B)(B: Monoid[B]): B", "member" : "cats.Foldable.foldMap", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#foldMap[A,B](fa:F[A])(f:A=>B)(implicitB:cats.Monoid[B]):B", "kind" : "def"}, {"label" : "combineAll", "tail" : "(fa: ListVector[A])(arg0: Monoid[A]): A", "member" : "cats.Foldable.combineAll", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#combineAll[A](fa:F[A])(implicitevidence$1:cats.Monoid[A]):A", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: ListVector[A])(A: Monoid[A]): A", "member" : "cats.Foldable.fold", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#fold[A](fa:F[A])(implicitA:cats.Monoid[A]):A", "kind" : "def"}, {"label" : "collectFirstSome", "tail" : "(fa: ListVector[A])(f: (A) ⇒ Option[B]): Option[B]", "member" : "cats.Foldable.collectFirstSome", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#collectFirstSome[A,B](fa:F[A])(f:A=>Option[B]):Option[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(fa: ListVector[A])(pf: PartialFunction[A, B]): Option[B]", "member" : "cats.Foldable.collectFirst", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#collectFirst[A,B](fa:F[A])(pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "get", "tail" : "(fa: ListVector[A])(idx: Long): Option[A]", "member" : "cats.Foldable.get", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#get[A](fa:F[A])(idx:Long):Option[A]", "kind" : "def"}, {"label" : "maximumOption", "tail" : "(fa: ListVector[A])(A: Order[A]): Option[A]", "member" : "cats.Foldable.maximumOption", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#maximumOption[A](fa:F[A])(implicitA:cats.Order[A]):Option[A]", "kind" : "def"}, {"label" : "minimumOption", "tail" : "(fa: ListVector[A])(A: Order[A]): Option[A]", "member" : "cats.Foldable.minimumOption", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#minimumOption[A](fa:F[A])(implicitA:cats.Order[A]):Option[A]", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(fa: ListVector[A])(f: (A, Eval[A]) ⇒ Eval[A]): Eval[Option[A]]", "member" : "cats.Foldable.reduceRightOption", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#reduceRightOption[A](fa:F[A])(f:(A,cats.Eval[A])=>cats.Eval[A]):cats.Eval[Option[A]]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(fa: ListVector[A])(f: (A, A) ⇒ A): Option[A]", "member" : "cats.Foldable.reduceLeftOption", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#reduceLeftOption[A](fa:F[A])(f:(A,A)=>A):Option[A]", "kind" : "def"}, {"label" : "reduceRightToOption", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B)(g: (A, Eval[B]) ⇒ Eval[B]): Eval[Option[B]]", "member" : "cats.Foldable.reduceRightToOption", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#reduceRightToOption[A,B](fa:F[A])(f:A=>B)(g:(A,cats.Eval[B])=>cats.Eval[B]):cats.Eval[Option[B]]", "kind" : "def"}, {"label" : "reduceLeftToOption", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B)(g: (B, A) ⇒ B): Option[B]", "member" : "cats.Foldable.reduceLeftToOption", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#reduceLeftToOption[A,B](fa:F[A])(f:A=>B)(g:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "size", "tail" : "(fa: ListVector[A]): Long", "member" : "cats.UnorderedFoldable.size", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#size[A](fa:F[A]):Long", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]ListVector[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]ListVector[G[α]]]", "member" : "cats.Functor.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: ListVector[A], b: B): ListVector[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: ListVector[A], b: B): ListVector[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: ListVector[A], b: B): ListVector[B]", "member" : "cats.Functor.as", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B): ListVector[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: ListVector[A]): ListVector[Unit]", "member" : "cats.Functor.void", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (ListVector[A]) ⇒ ListVector[B]", "member" : "cats.Functor.lift", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: ListVector[A]): ListVector[B]", "member" : "cats.Functor.widen", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B): ListVector[B]", "member" : "cats.Functor.fmap", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: ListVector[A])(f: (A) ⇒ B)(g: (B) ⇒ A): ListVector[B]", "member" : "cats.Functor.imap", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]ListVector[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]ListVector[G[α]]]", "member" : "cats.Invariant.compose", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/ListVectorInstances$ListVectorTraverse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "lzwpack.data.SparseVector", "members_trait" : [{"label" : "find", "tail" : "(f: (Int, A) ⇒ Boolean): Option[(Int, A)]", "member" : "lzwpack.data.SparseVector.find", "link" : "lzwpack\/data\/SparseVector.html#find(f:(Int,A)=>Boolean):Option[(Int,A)]", "kind" : "def"}, {"label" : "size", "tail" : ": Int", "member" : "lzwpack.data.SparseVector.size", "link" : "lzwpack\/data\/SparseVector.html#size:Int", "kind" : "lazy val"}, {"label" : "+", "tail" : "(kv: (Int, AA)): SparseVector[AA]", "member" : "lzwpack.data.SparseVector.+", "link" : "lzwpack\/data\/SparseVector.html#+[AA>:A](kv:(Int,AA)):lzwpack.data.SparseVector[AA]", "kind" : "def"}, {"label" : "contains", "tail" : "(i: Int): Boolean", "member" : "lzwpack.data.SparseVector.contains", "link" : "lzwpack\/data\/SparseVector.html#contains(i:Int):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): A", "member" : "lzwpack.data.SparseVector.apply", "link" : "lzwpack\/data\/SparseVector.html#apply(i:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/SparseVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/SparseVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/SparseVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/SparseVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/SparseVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/SparseVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/SparseVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/SparseVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/SparseVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/SparseVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/SparseVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/SparseVector.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/SparseVector.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/SparseVector.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/SparseVector.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/SparseVector.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/SparseVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/SparseVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/SparseVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "lzwpack.data.SparseVector.isEmpty", "link" : "lzwpack\/data\/SparseVector.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "fold", "tail" : "(init: ⇒ B)(f: ((Int, A), ⇒ B) ⇒ B): B", "member" : "lzwpack.data.SparseVector.fold", "link" : "lzwpack\/data\/SparseVector.html#fold[B](init:=>B)(f:((Int,A),=>B)=>B):B", "kind" : "abstract def"}, {"label" : "updated", "tail" : "(i: Int, a: AA): SparseVector[AA]", "member" : "lzwpack.data.SparseVector.updated", "link" : "lzwpack\/data\/SparseVector.html#updated[AA>:A](i:Int,a:AA):lzwpack.data.SparseVector[AA]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(i: Int): Option[A]", "member" : "lzwpack.data.SparseVector.get", "link" : "lzwpack\/data\/SparseVector.html#get(i:Int):Option[A]", "kind" : "abstract def"}], "shortDescription" : "A SparseVector is a bit-mapped trie with 32 branches at each node.", "object" : "lzwpack\/data\/SparseVector$.html", "members_object" : [{"label" : "empty", "tail" : "(): SparseVector[A]", "member" : "lzwpack.data.SparseVector.empty", "link" : "lzwpack\/data\/SparseVector$.html#empty[A]:lzwpack.data.SparseVector[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(as: A*): SparseVector[A]", "member" : "lzwpack.data.SparseVector.apply", "link" : "lzwpack\/data\/SparseVector$.html#apply[A](as:A*):lzwpack.data.SparseVector[A]", "kind" : "def"}, {"label" : "Radix", "tail" : ": Int", "member" : "lzwpack.data.SparseVector.Radix", "link" : "lzwpack\/data\/SparseVector$.html#Radix:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/data\/SparseVector$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/data\/SparseVector$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/data\/SparseVector$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/data\/SparseVector$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/data\/SparseVector$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/data\/SparseVector$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/data\/SparseVector$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/SparseVector$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/SparseVector$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/data\/SparseVector$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/data\/SparseVector$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/data\/SparseVector$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/data\/SparseVector$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/data\/SparseVector$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/data\/SparseVector$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/data\/SparseVector$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/data\/SparseVector$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/data\/SparseVector$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/data\/SparseVector$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "lzwpack\/data\/SparseVector.html", "kind" : "trait"}], "lzwpack.implicits" : [{"name" : "lzwpack.implicits.AllImplicits", "members_trait" : [{"label" : "StringOps", "tail" : "", "member" : "lzwpack.implicits.StringImplicits.StringOps", "link" : "lzwpack\/implicits\/StringImplicits.html#StringOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "LongOps", "tail" : "", "member" : "lzwpack.implicits.LongImplicits.LongOps", "link" : "lzwpack\/implicits\/LongImplicits.html#LongOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ByteOps", "tail" : "", "member" : "lzwpack.implicits.ByteImplicits.ByteOps", "link" : "lzwpack\/implicits\/ByteImplicits.html#ByteOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/AllImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/AllImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/AllImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/AllImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/AllImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/AllImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/AllImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/AllImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/AllImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/AllImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/AllImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/AllImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/AllImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/AllImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/AllImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/AllImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/AllImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/AllImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/AllImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Mixins all implicits into a single trait.", "trait" : "lzwpack\/implicits\/AllImplicits.html", "kind" : "trait"}, {"name" : "lzwpack.implicits.ByteImplicits", "members_trait" : [{"label" : "ByteOps", "tail" : "", "member" : "lzwpack.implicits.ByteImplicits.ByteOps", "link" : "lzwpack\/implicits\/ByteImplicits.html#ByteOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/ByteImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/ByteImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/ByteImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/ByteImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/ByteImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/ByteImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/ByteImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/ByteImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/ByteImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/ByteImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/ByteImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/ByteImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/ByteImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/ByteImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/ByteImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/ByteImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides extension functions for the standard scala.Byte type.", "trait" : "lzwpack\/implicits\/ByteImplicits.html", "kind" : "trait"}, {"name" : "lzwpack.implicits.ByteImplicits.ByteOps", "shortDescription" : "", "members_class" : [{"label" : "unsigned", "tail" : "(): Int", "member" : "lzwpack.implicits.ByteImplicits.ByteOps.unsigned", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#unsigned:Int", "kind" : "def"}, {"member" : "lzwpack.implicits.ByteImplicits.ByteOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/implicits\/ByteImplicits$ByteOps.html", "kind" : "class"}, {"name" : "lzwpack.implicits.LongImplicits", "members_trait" : [{"label" : "LongOps", "tail" : "", "member" : "lzwpack.implicits.LongImplicits.LongOps", "link" : "lzwpack\/implicits\/LongImplicits.html#LongOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/LongImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/LongImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/LongImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/LongImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/LongImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/LongImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/LongImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/LongImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/LongImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/LongImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/LongImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/LongImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/LongImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/LongImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/LongImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/LongImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "lzwpack\/implicits\/LongImplicits.html", "kind" : "trait"}, {"name" : "lzwpack.implicits.LongImplicits.LongOps", "shortDescription" : "", "members_class" : [{"label" : "hex", "tail" : "(): String", "member" : "lzwpack.implicits.LongImplicits.LongOps.hex", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#hex:String", "kind" : "def"}, {"label" : "bin", "tail" : "(size: Int): String", "member" : "lzwpack.implicits.LongImplicits.LongOps.bin", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#bin(size:Int):String", "kind" : "def"}, {"label" : "bin", "tail" : "(): String", "member" : "lzwpack.implicits.LongImplicits.LongOps.bin", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#bin:String", "kind" : "def"}, {"label" : "bitsize", "tail" : "(): Int", "member" : "lzwpack.implicits.LongImplicits.LongOps.bitsize", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#bitsize:Int", "kind" : "def"}, {"member" : "lzwpack.implicits.LongImplicits.LongOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/LongImplicits$LongOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/implicits\/LongImplicits$LongOps.html", "kind" : "class"}, {"name" : "lzwpack.implicits.StringImplicits", "members_trait" : [{"label" : "StringOps", "tail" : "", "member" : "lzwpack.implicits.StringImplicits.StringOps", "link" : "lzwpack\/implicits\/StringImplicits.html#StringOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/StringImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/StringImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/StringImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/StringImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/StringImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/StringImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/StringImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/StringImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/StringImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/StringImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/StringImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/StringImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/StringImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/StringImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/StringImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/StringImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "lzwpack\/implicits\/StringImplicits.html", "kind" : "trait"}, {"name" : "lzwpack.implicits.StringImplicits.StringOps", "shortDescription" : "", "members_class" : [{"label" : "b", "tail" : "(_args: Any*): Int", "member" : "lzwpack.implicits.StringImplicits.StringOps.b", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#b(_args:Any*):Int", "kind" : "def"}, {"member" : "lzwpack.implicits.StringImplicits.StringOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "lzwpack\/implicits\/StringImplicits$StringOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "lzwpack\/implicits\/StringImplicits$StringOps.html", "kind" : "class"}]};